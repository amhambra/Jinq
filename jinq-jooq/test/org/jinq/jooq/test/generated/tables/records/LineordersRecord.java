/*
 * This file is generated by jOOQ.
 */
package org.jinq.jooq.test.generated.tables.records;


import org.jinq.jooq.test.generated.tables.Lineorders;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LineordersRecord extends UpdatableRecordImpl<LineordersRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>APP.LINEORDERS.SALEID</code>.
     */
    public void setSaleid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>APP.LINEORDERS.SALEID</code>.
     */
    public Integer getSaleid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>APP.LINEORDERS.ITEMID</code>.
     */
    public void setItemid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>APP.LINEORDERS.ITEMID</code>.
     */
    public Integer getItemid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>APP.LINEORDERS.QUANTITY</code>.
     */
    public void setQuantity(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>APP.LINEORDERS.QUANTITY</code>.
     */
    public Integer getQuantity() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Integer, Integer> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Lineorders.LINEORDERS.SALEID;
    }

    @Override
    public Field<Integer> field2() {
        return Lineorders.LINEORDERS.ITEMID;
    }

    @Override
    public Field<Integer> field3() {
        return Lineorders.LINEORDERS.QUANTITY;
    }

    @Override
    public Integer component1() {
        return getSaleid();
    }

    @Override
    public Integer component2() {
        return getItemid();
    }

    @Override
    public Integer component3() {
        return getQuantity();
    }

    @Override
    public Integer value1() {
        return getSaleid();
    }

    @Override
    public Integer value2() {
        return getItemid();
    }

    @Override
    public Integer value3() {
        return getQuantity();
    }

    @Override
    public LineordersRecord value1(Integer value) {
        setSaleid(value);
        return this;
    }

    @Override
    public LineordersRecord value2(Integer value) {
        setItemid(value);
        return this;
    }

    @Override
    public LineordersRecord value3(Integer value) {
        setQuantity(value);
        return this;
    }

    @Override
    public LineordersRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LineordersRecord
     */
    public LineordersRecord() {
        super(Lineorders.LINEORDERS);
    }

    /**
     * Create a detached, initialised LineordersRecord
     */
    public LineordersRecord(Integer saleid, Integer itemid, Integer quantity) {
        super(Lineorders.LINEORDERS);

        setSaleid(saleid);
        setItemid(itemid);
        setQuantity(quantity);
    }
}
