/*
 * This file is generated by jOOQ.
 */
package org.jinq.jooq.test.generated.tables.records;


import org.jinq.jooq.test.generated.tables.Items;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemsRecord extends UpdatableRecordImpl<ItemsRecord> implements Record4<Integer, String, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>APP.ITEMS.ITEMID</code>.
     */
    public void setItemid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>APP.ITEMS.ITEMID</code>.
     */
    public Integer getItemid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>APP.ITEMS.NAME</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>APP.ITEMS.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>APP.ITEMS.SALEPRICE</code>.
     */
    public void setSaleprice(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>APP.ITEMS.SALEPRICE</code>.
     */
    public Integer getSaleprice() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>APP.ITEMS.PURCHASEPRICE</code>.
     */
    public void setPurchaseprice(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>APP.ITEMS.PURCHASEPRICE</code>.
     */
    public Integer getPurchaseprice() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Items.ITEMS.ITEMID;
    }

    @Override
    public Field<String> field2() {
        return Items.ITEMS.NAME;
    }

    @Override
    public Field<Integer> field3() {
        return Items.ITEMS.SALEPRICE;
    }

    @Override
    public Field<Integer> field4() {
        return Items.ITEMS.PURCHASEPRICE;
    }

    @Override
    public Integer component1() {
        return getItemid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Integer component3() {
        return getSaleprice();
    }

    @Override
    public Integer component4() {
        return getPurchaseprice();
    }

    @Override
    public Integer value1() {
        return getItemid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public Integer value3() {
        return getSaleprice();
    }

    @Override
    public Integer value4() {
        return getPurchaseprice();
    }

    @Override
    public ItemsRecord value1(Integer value) {
        setItemid(value);
        return this;
    }

    @Override
    public ItemsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ItemsRecord value3(Integer value) {
        setSaleprice(value);
        return this;
    }

    @Override
    public ItemsRecord value4(Integer value) {
        setPurchaseprice(value);
        return this;
    }

    @Override
    public ItemsRecord values(Integer value1, String value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ItemsRecord
     */
    public ItemsRecord() {
        super(Items.ITEMS);
    }

    /**
     * Create a detached, initialised ItemsRecord
     */
    public ItemsRecord(Integer itemid, String name, Integer saleprice, Integer purchaseprice) {
        super(Items.ITEMS);

        setItemid(itemid);
        setName(name);
        setSaleprice(saleprice);
        setPurchaseprice(purchaseprice);
    }
}
