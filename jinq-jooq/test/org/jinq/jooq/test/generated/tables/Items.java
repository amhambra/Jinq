/*
 * This file is generated by jOOQ.
 */
package org.jinq.jooq.test.generated.tables;


import org.jinq.jooq.test.generated.App;
import org.jinq.jooq.test.generated.Keys;
import org.jinq.jooq.test.generated.tables.records.ItemsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Items extends TableImpl<ItemsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>APP.ITEMS</code>
     */
    public static final Items ITEMS = new Items();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsRecord> getRecordType() {
        return ItemsRecord.class;
    }

    /**
     * The column <code>APP.ITEMS.ITEMID</code>.
     */
    public final TableField<ItemsRecord, Integer> ITEMID = createField(DSL.name("ITEMID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>APP.ITEMS.NAME</code>.
     */
    public final TableField<ItemsRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>APP.ITEMS.SALEPRICE</code>.
     */
    public final TableField<ItemsRecord, Integer> SALEPRICE = createField(DSL.name("SALEPRICE"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>APP.ITEMS.PURCHASEPRICE</code>.
     */
    public final TableField<ItemsRecord, Integer> PURCHASEPRICE = createField(DSL.name("PURCHASEPRICE"), SQLDataType.INTEGER.nullable(false), this, "");

    private Items(Name alias, Table<ItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Items(Name alias, Table<ItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>APP.ITEMS</code> table reference
     */
    public Items(String alias) {
        this(DSL.name(alias), ITEMS);
    }

    /**
     * Create an aliased <code>APP.ITEMS</code> table reference
     */
    public Items(Name alias) {
        this(alias, ITEMS);
    }

    /**
     * Create a <code>APP.ITEMS</code> table reference
     */
    public Items() {
        this(DSL.name("ITEMS"), null);
    }

    public <O extends Record> Items(Table<O> child, ForeignKey<O, ItemsRecord> key) {
        super(child, key, ITEMS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : App.APP;
    }

    @Override
    public UniqueKey<ItemsRecord> getPrimaryKey() {
        return Keys.SQL220102165112341;
    }

    @Override
    public Items as(String alias) {
        return new Items(DSL.name(alias), this);
    }

    @Override
    public Items as(Name alias) {
        return new Items(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(String name) {
        return new Items(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Name name) {
        return new Items(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
