/*
 * This file is generated by jOOQ.
 */
package org.jinq.jooq.test.generated.tables.records;


import org.jinq.jooq.test.generated.tables.Suppliers;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SuppliersRecord extends UpdatableRecordImpl<SuppliersRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>APP.SUPPLIERS.SUPPLIERID</code>.
     */
    public void setSupplierid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>APP.SUPPLIERS.SUPPLIERID</code>.
     */
    public Integer getSupplierid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>APP.SUPPLIERS.NAME</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>APP.SUPPLIERS.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>APP.SUPPLIERS.COUNTRY</code>.
     */
    public void setCountry(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>APP.SUPPLIERS.COUNTRY</code>.
     */
    public String getCountry() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Suppliers.SUPPLIERS.SUPPLIERID;
    }

    @Override
    public Field<String> field2() {
        return Suppliers.SUPPLIERS.NAME;
    }

    @Override
    public Field<String> field3() {
        return Suppliers.SUPPLIERS.COUNTRY;
    }

    @Override
    public Integer component1() {
        return getSupplierid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getCountry();
    }

    @Override
    public Integer value1() {
        return getSupplierid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getCountry();
    }

    @Override
    public SuppliersRecord value1(Integer value) {
        setSupplierid(value);
        return this;
    }

    @Override
    public SuppliersRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SuppliersRecord value3(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public SuppliersRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SuppliersRecord
     */
    public SuppliersRecord() {
        super(Suppliers.SUPPLIERS);
    }

    /**
     * Create a detached, initialised SuppliersRecord
     */
    public SuppliersRecord(Integer supplierid, String name, String country) {
        super(Suppliers.SUPPLIERS);

        setSupplierid(supplierid);
        setName(name);
        setCountry(country);
    }
}
