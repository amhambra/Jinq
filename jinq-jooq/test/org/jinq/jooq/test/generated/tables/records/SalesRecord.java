/*
 * This file is generated by jOOQ.
 */
package org.jinq.jooq.test.generated.tables.records;


import org.jinq.jooq.test.generated.tables.Sales;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SalesRecord extends UpdatableRecordImpl<SalesRecord> implements Record3<Integer, Integer, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>APP.SALES.SALEID</code>.
     */
    public void setSaleid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>APP.SALES.SALEID</code>.
     */
    public Integer getSaleid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>APP.SALES.CUSTOMERID</code>.
     */
    public void setCustomerid(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>APP.SALES.CUSTOMERID</code>.
     */
    public Integer getCustomerid() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>APP.SALES.DATE</code>.
     */
    public void setDate(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>APP.SALES.DATE</code>.
     */
    public String getDate() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Sales.SALES.SALEID;
    }

    @Override
    public Field<Integer> field2() {
        return Sales.SALES.CUSTOMERID;
    }

    @Override
    public Field<String> field3() {
        return Sales.SALES.DATE;
    }

    @Override
    public Integer component1() {
        return getSaleid();
    }

    @Override
    public Integer component2() {
        return getCustomerid();
    }

    @Override
    public String component3() {
        return getDate();
    }

    @Override
    public Integer value1() {
        return getSaleid();
    }

    @Override
    public Integer value2() {
        return getCustomerid();
    }

    @Override
    public String value3() {
        return getDate();
    }

    @Override
    public SalesRecord value1(Integer value) {
        setSaleid(value);
        return this;
    }

    @Override
    public SalesRecord value2(Integer value) {
        setCustomerid(value);
        return this;
    }

    @Override
    public SalesRecord value3(String value) {
        setDate(value);
        return this;
    }

    @Override
    public SalesRecord values(Integer value1, Integer value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SalesRecord
     */
    public SalesRecord() {
        super(Sales.SALES);
    }

    /**
     * Create a detached, initialised SalesRecord
     */
    public SalesRecord(Integer saleid, Integer customerid, String date) {
        super(Sales.SALES);

        setSaleid(saleid);
        setCustomerid(customerid);
        setDate(date);
    }
}
