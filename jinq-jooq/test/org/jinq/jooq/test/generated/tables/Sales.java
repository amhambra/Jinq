/*
 * This file is generated by jOOQ.
 */
package org.jinq.jooq.test.generated.tables;


import org.jinq.jooq.test.generated.App;
import org.jinq.jooq.test.generated.Keys;
import org.jinq.jooq.test.generated.tables.records.SalesRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sales extends TableImpl<SalesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>APP.SALES</code>
     */
    public static final Sales SALES = new Sales();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesRecord> getRecordType() {
        return SalesRecord.class;
    }

    /**
     * The column <code>APP.SALES.SALEID</code>.
     */
    public final TableField<SalesRecord, Integer> SALEID = createField(DSL.name("SALEID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>APP.SALES.CUSTOMERID</code>.
     */
    public final TableField<SalesRecord, Integer> CUSTOMERID = createField(DSL.name("CUSTOMERID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>APP.SALES.DATE</code>.
     */
    public final TableField<SalesRecord, String> DATE = createField(DSL.name("DATE"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    private Sales(Name alias, Table<SalesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sales(Name alias, Table<SalesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>APP.SALES</code> table reference
     */
    public Sales(String alias) {
        this(DSL.name(alias), SALES);
    }

    /**
     * Create an aliased <code>APP.SALES</code> table reference
     */
    public Sales(Name alias) {
        this(alias, SALES);
    }

    /**
     * Create a <code>APP.SALES</code> table reference
     */
    public Sales() {
        this(DSL.name("SALES"), null);
    }

    public <O extends Record> Sales(Table<O> child, ForeignKey<O, SalesRecord> key) {
        super(child, key, SALES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : App.APP;
    }

    @Override
    public UniqueKey<SalesRecord> getPrimaryKey() {
        return Keys.SQL220102165112334;
    }

    @Override
    public Sales as(String alias) {
        return new Sales(DSL.name(alias), this);
    }

    @Override
    public Sales as(Name alias) {
        return new Sales(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(String name) {
        return new Sales(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(Name name) {
        return new Sales(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
